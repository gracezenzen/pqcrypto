extern crate cc;
extern crate glob;

use std::path::Path;

{% set globals = namespace(have_avx2=False) %}

fn main() {
    let common_dir = Path::new("pqclean/common");
    let common_files = vec![
        common_dir.join("nistseedexpander.c"),
        common_dir.join("fips202.c"),
        common_dir.join("aes.c"),
        common_dir.join("sha2.c"),
        common_dir.join("randombytes.c"),
        common_dir.join("sp800-185.c"),
    ];

    cc::Build::new()
        .flag("-std=c99")
        .include("pqclean/common")
        .files(common_files.into_iter())
        .compile("pqclean_common");

    {% for scheme in schemes %}
    {% for implementation in [scheme.implementation] + scheme.alt_implementations|default([]) %}
    {
        let mut builder = cc::Build::new();
        let target_dir = Path::new("pqclean/crypto_{{ type }}/{{ scheme.name }}/{{ implementation }}");
        let scheme_files = glob::glob(target_dir.join("*.c").to_str().unwrap()).unwrap();
        builder.flag("-std=c99")
               .include("pqclean/common")
               .include(target_dir)
               .files(scheme_files.into_iter().map(|p| p.unwrap().to_string_lossy().into_owned()));
        builder.compile("{{ scheme.name }}_{{ implementation }}");
    }
    {% endfor %}

    {# Do we have an AVX2 version? #}
    {% if 'avx2_implementation' in scheme %}
    {% set implementation = scheme.avx2_implementation %}
    {% set globals.have_avx2 = True %}
    #[{{ avx2_guard }}]
    {
        let target_dir = Path::new("pqclean/crypto_{{ type }}/{{ scheme.name }}/{{ implementation }}");
        let scheme_files = glob::glob(target_dir.join("*.[csS]").to_str().unwrap()).unwrap();
        cc::Build::new()
            .flag("-std=c99")
            .flag("-mavx2")
            .flag("-mbmi2")
            .flag("-mbmi")
            .flag("-maes")
            .flag("-mpopcnt")
            .include("pqclean/common")
            .include(target_dir)
            .files(scheme_files.into_iter().map(|p| p.unwrap().to_string_lossy().into_owned()))
            .compile("{{ scheme.name }}_{{ implementation }}");

        //cc::Build::new()
        //    .flag("-std=c99")
        //    .flag("-mavx2")
        //    .file(common_dir.join("keccak4x").join("KeccakP-1600-times4-SIMD256.c"))
        //    .compile("keccak4x");

    }
    {% endif %}
    {% endfor %}

    {% if globals.have_avx2 %}
    // Print enableing flag for AVX2 implementation
    #[{{ avx2_guard }}]
    {
        println!("cargo:rustc-cfg=enable_avx2");
    }
    {% endif %}
}
